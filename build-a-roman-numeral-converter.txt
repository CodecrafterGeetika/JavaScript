** start of index.html **

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Roman Numeral Converter</title>
  <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="container">
    <h1 class="title">Roman Numeral <span>Converter</span></h1>
    <form id="form" class="converter-form">
      <input type="number" id="number" placeholder="Enter a number (1-3999)" />
      <button type="submit" id="convert-btn">Convert</button>
    </form>
    <div id="output" class="output hidden"></div>
  </div>

  <script src="script.js"></script>
</body>
</html>

** end of index.html **

** start of styles.css **

* {
  box-sizing: border-box;
}

body {
  font-family: 'Quicksand', sans-serif;
  margin: 0;
  padding: 0;
  background: linear-gradient(135deg, #2c3e50, #3498db);
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  color: #fff;
}

.container {
  text-align: center;
  background: rgba(255, 255, 255, 0.1);
  padding: 2rem;
  border-radius: 15px;
  box-shadow: 0 0 25px rgba(0, 0, 0, 0.25);
  width: 90%;
  max-width: 400px;
  animation: fadeIn 1s ease-in;
}

.title {
  font-size: 2rem;
  margin-bottom: 1rem;
}

.title span {
  color: #f1c40f;
}

.converter-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

input[type="number"] {
  padding: 0.75rem;
  border: none;
  border-radius: 10px;
  font-size: 1rem;
  outline: none;
  transition: box-shadow 0.3s ease;
}

input[type="number"]:focus {
  box-shadow: 0 0 10px #f1c40f;
}

button {
  padding: 0.75rem;
  font-size: 1rem;
  border: none;
  border-radius: 10px;
  background: #f1c40f;
  color: #2c3e50;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s;
}

button:hover {
  background: #d4ac0d;
  transform: scale(1.05);
}

.output {
  font-size: 1.5rem;
  transition: opacity 0.3s ease;
  min-height: 2rem;
}

.output.alert {
  color: #e74c3c;
  font-weight: bold;
  animation: shake 0.4s;
}

.hidden {
  opacity: 0;
}

@keyframes shake {
  0% { transform: translateX(0); }
  25% { transform: translateX(-6px); }
  50% { transform: translateX(6px); }
  75% { transform: translateX(-6px); }
  100% { transform: translateX(0); }
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-20px); }
  to { opacity: 1; transform: translateY(0); }
}

** end of styles.css **

** start of script.js **

const form = document.getElementById('form');
const convertButton = document.getElementById('convert-btn');
const output = document.getElementById('output');

const convertToRoman = num => {
  const ref = [
    ['M', 1000],
    ['CM', 900],
    ['D', 500],
    ['CD', 400],
    ['C', 100],
    ['XC', 90],
    ['L', 50],
    ['XL', 40],
    ['X', 10],
    ['IX', 9],
    ['V', 5],
    ['IV', 4],
    ['I', 1]
  ];
  const res = [];

  ref.forEach(function (arr) {
    while (num >= arr[1]) {
      res.push(arr[0]);
      num -= arr[1];
    }
  });

  return res.join('');
};

const isValid = (str, int) => {
  let errText = '';

  if (!str || str.match(/[e.]/g)) {
    errText = 'Please enter a valid number.';
  } else if (int < 1) {
    errText = 'Please enter a number greater than or equal to 1.';
  } else if (int > 3999) {
    errText = 'Please enter a number less than or equal to 3999.';
  } else {
    // No errors detected
    return true;
  }

  // Handle error text and output styling
  output.innerText = errText;
  output.classList.add('alert');

  return false;
};

const clearOutput = () => {
  output.innerText = '';
  output.classList.remove('alert');
};

form.addEventListener('submit', e => {
  e.preventDefault();
  updateUI();
});

convertButton.addEventListener('click', () => {
  updateUI();
});

const updateUI = () => {
  const numStr = document.getElementById('number').value;
  const int = parseInt(numStr, 10);

  output.classList.remove('hidden');

  clearOutput();

  if (isValid(numStr, int)) {
    output.innerText = convertToRoman(int);
  }
};

** end of script.js **

